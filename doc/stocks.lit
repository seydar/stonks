@code_type ruby .
@comment_type # %s
@include doc/layout.lit
@title Computer-aided Day Trading

@s Computer-aided Day Trading

The stock market generally overreacts. When good news is published, the price
rises before subsequently falling some amount. When bad news is published, the
price plummets before subsequently rising some amount. One method of automation
would be scanning the news for headlines, measuring the sentiment, and then
investing when the price drops -- the news tells you where to look. Another
option is to scan the entire market and look for drops that likely result from
such news.

My method is to do exactly that: scan the entire market for a precipitous drop
in price over two days (opening of the first to closing of the second), and then
invest. How can I take advantage of that? How do I know when to sell? When
should I be satisfied with a stock's performance?

The database is discussed [here](/files/db.html).

@s The Process

The process starts simply: we answer the questions of "when do we buy" and "when
do we sell".

A stock price will drop and then it will likely go back up, due to **mean
reversion**. We are measuring several different dimensions for the best outcome,
which make this a difficult (annoying?) problem to solve without the help of
more computing power. As an intermediate step, I've settled on the figures in
this document, which have lent themselves to the below results:

<center>
<table>
  <tr>
    <th>Year</th>
    <th># of Buys</th>
    <th>S&P 500</th>
    <th>Mean ROI</th>
    <th>Median</th>
    <th>STDDEV</th>
    <th>Sharpe</th>
  </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2021.html">2021</a>
      </td>
      <td>68</td>
      <td>4.007%</td>
      <td>-90.738%</td>
      <td>-100%</td>
      <td>76.373%</td>
      <td>-1.188</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2020.html">2020</a>
      </td>
      <td>348</td>
      <td>33.315%</td>
      <td>156.223%</td>
      <td>137.963%</td>
      <td>388.322%</td>
      <td>0.402</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2019.html">2019</a>
      </td>
      <td>53</td>
      <td>15.011%</td>
      <td>79.495%</td>
      <td>33.156%</td>
      <td>169.753%</td>
      <td>0.468</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2018.html">2018</a>
      </td>
      <td>31</td>
      <td>15.933%</td>
      <td>198.597%</td>
      <td>7.446%</td>
      <td>997.574%</td>
      <td>0.199</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2017.html">2017</a>
      </td>
      <td>32</td>
      <td>23.224%</td>
      <td>207.064%</td>
      <td>6.502%</td>
      <td>618.783%</td>
      <td>0.335</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2016.html">2016</a>
      </td>
      <td>50</td>
      <td>21.222%</td>
      <td>167.163%</td>
      <td>121.088%</td>
      <td>255.225%</td>
      <td>0.655</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2015.html">2015</a>
      </td>
      <td>40</td>
      <td>7.913%</td>
      <td>216.515%</td>
      <td>80.867%</td>
      <td>272.092%</td>
      <td>0.796</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2014.html">2014</a>
      </td>
      <td>24</td>
      <td>10.392%</td>
      <td>47.703%</td>
      <td>18.585%</td>
      <td>88.281%</td>
      <td>0.54</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2013.html">2013</a>
      </td>
      <td>9</td>
      <td>39.903%</td>
      <td>41.125%</td>
      <td>11.765%</td>
      <td>62.839%</td>
      <td>0.654</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2012.html">2012</a>
      </td>
      <td>23</td>
      <td>19.091%</td>
      <td>94.904%</td>
      <td>74.043%</td>
      <td>81.324%</td>
      <td>1.167</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2011.html">2011</a>
      </td>
      <td>18</td>
      <td>40.783%</td>
      <td>26.39%</td>
      <td>15.335%</td>
      <td>52.428%</td>
      <td>0.503</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2010.html">2010</a>
      </td>
      <td>9</td>
      <td>21.148%</td>
      <td>116.993%</td>
      <td>44.486%</td>
      <td>122.933%</td>
      <td>0.952</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2009.html">2009</a>
      </td>
      <td>245</td>
      <td>30.06%</td>
      <td>268.279%</td>
      <td>261.333%</td>
      <td>263.722%</td>
      <td>1.017</td>
    </tr>


    <tr>
      <td>
        <a href="/files/stock_recs.2008.html">2008</a>
      </td>
      <td>351</td>
      <td>11.892%</td>
      <td>153.032%</td>
      <td>101.984%</td>
      <td>311.537%</td>
      <td>0.491</td>
    </tr>

</table>
</center>

@s When Do We Buy?

What a great question.

We buy when the price drops and we are confident that the price will go back up.

The strategy is to invest a little bit into a lot of stocks, betting that this
"sector" of the market will go up, without placing that guarantee on any
individual stock. As a result, we need to ensure that we have enough
opportunities to invest (since we will likely be investing evenly into each
stock -- I can't predict the future of how many buy signals we'll see over the
course of the year), and we have to balance that with how long we hold each
stock and how much the average ROI is.

#### Price Drop

First off, what does a "drop in price" look like? What kinds of drops are there?
Reviewing the data from the NYSE for 2019 (1 January - 31 December), we get the
following numbers for the fractional 2-day change (from opening of one day to
the close of the next):

--- Price Change and Occurrences
tids  = Ticker.where(:exchange => 'NYSE').all.map {|t| t.id }
debut = Time.parse('1 jan 2019')
fin   = Time.parse('31 dec 2019')
bars  = Bar.where(:time => debut..fin, :ticker_id => tids)
           .order(:ticker_id, Sequel.asc(:date))
           .all
groups  = bars.group_by {|b| b.ticker_id }
changes = groups.map do |ticker_id, bars|
  bars.each_cons(2).map {|a, b| b.change_from a }
end.flatten

# This will sort the changes into the bucket that are closest in value
hist = changes.histogram [-0.35, -0.25, -0.15, -0.05, 0.05, 0.15, 0.25, 0.35]
---

--- Price Change and Occurrences :=
2019
"Fractional 2-day Change" => "# of Occurrences"
               -100..-0.3 => 99
               -0.3..-0.2 => 243
               -0.2..-0.1 => 2532
               -0.1.. 0   => 267752
                0  .. 0.1 => 309317
                0.1.. 0.2 => 3218
                0.2.. 0.3 => 377
                0.3.. 100 => 151
---

Looking at the results for 2015, we get:

--- Price Change and Occurrences :=
2015
"Fractional 2-day Change" => "# of Occurrences"
               -100..-0.3 => 36
               -0.3..-0.2 => 192
               -0.2..-0.1 => 2171
               -0.1.. 0   => 237530
                0  .. 0.1 => 243177
                0.1.. 0.2 => 2490
                0.2.. 0.3 => 238
                0.3.. 100 => 78
---

I therefore decided that -0.2 would be sufficient to start with: we can cull
the herd of opportunities from there.

#### Price Movement

The logic here is based on my theory of price change: the price of a stock
changes when enough sales have occurred to raise the price (an unenlightening
statement), with $\Delta P_{min}$ being the minimum increase in a stock's price:

$$\Delta P_{day} = \Delta P_{min} * N_{shares}$$

Each share that is traded involves a buyer and a seller. The question is whether
the change in price is positive or negative. This is marked by the minimum
change in price.

The minimum increase in a stock's price comes from the idea that you can always
produce a number that is between two others based, so in theory, you could
always undercut someone else's bid that is still higher than the original price.
Since you likely cannot pursue the depths of the Rationals when buying stock,
there is some minimum price ($\Delta P_{min}$) that defines the minimum a stock
price must increase.

With a larger minimum price increase, then fewer sales are required to raise the
price to meet a certain threshold. Dividing both sides by $P_{day - 1}$, we get
the fractional change in price:

$$\frac{\Delta P_{day}}{P_{day - 1}} = \frac{\Delta P_{min} * N_{shares}}{P_{day - 1}}$$

This now represents the fractional ROI. Assuming the $P_{min}$ is constant for
all stocks, $\frac{\Delta P_{min}}{P_{day - 1}}$ will be greater when $P$ is
lower. We want to maximize $N_{shares}$ and minimize $P$, which is summarized in
our maximization of $\frac{N_{shares}}{P_{day - 1}}$, visible in the following
rephrasing:

$$\frac{\Delta P_{day}}{P_{day - 1}} = \Delta P_{min} * \frac{N_{shares}}{P_{day - 1}}$$

The change in price works in both directions, so maximizing the above term
could also lead to a sever price drop. But since we're looking at stocks after
they have already dropped considerably, we're relying on **mean reversion** to
push the price up.

--- When Do We Buy?
    @assessor.buy_when :history => 2 do |history|
      today     = history[-1]
      yesterday = history[-2]
    
      [[today.change_from(yesterday) <= drop,
        today.change_from(today)     <= drop].any?,

       today.rank <= rank
      ].all?
    end
---

`today.rank` here is the rank of that ticker at the end of that day. It is
computed through the following lines, and each ticker's daily rank and rank
value are stored in the database within the bar:

--- Computing Rank
# {"SYM" => [Rank, Value]}
rankings = Ticker.rankings NYSE, :date => date
rankings[ticker.symbol] #=> [Rank, Value]
---

@s When Do We Sell?

The goal is not to get the most ROI over an arbitrary amount of time. The goal
is to get the most ROI over a finite period of time, the smaller the better.

This is a work-in-progress: I am balancing individual ROI, because that affects
the hold-time for each stock, because that affects when I have access to the
earnings, because that affects my ability to reinvest that money into this
trading plan.

## Individual ROI

I want to maximize the ROI from each stock that I invest in. This is balanced
with my risk-tolerance.

#### Risk-Tolerance Reduces Over Time

As time goes on, more opportunities to invest will arise, and, being a man with
limited impulse control, I am going to invest in them.

=> This means that as time goes on, I am risking more and more of my money.

=> Since I am risking more and more of my money, I get more and more desperate
to get it back.

=> Since I am getting desperate, I am going to lower my standards for the kinds
of returns that I will accept.

#### What Degree of Polynomial?

The line that marks the threshold above which I will sell a stock could be
anything, so from one perspective, I need to try polynomials of all different
degrees. However, a polynomial would imply that there is a grand, overarching
pattern to the way stocks rise after a drop, which I do not believe to be true,
so I'm just looking to manage my risk appropriately.

<br/>

Anyways, I figured a linear drop ($y = m * x + b$) would be good enough, so I
ran 1,200 tests on the data to find which curve would give me the best results.
It looked roughly like this:

--- Line Fitting
0.00.step(:to => 0.1, :by => 0.005) do |m|
  m = -m
  0.step(:to => 6, :by => 0.1) do |b|
    sim.m = m
    sim.b = b
    sells = sim.assess_sells

    # ...
  end
end
---

The output gave the **results of paper trading those stocks**, based on the idea
that I am going to invest the same amount per investment opportunity (instead of
investing the same amount per year, splitting that amount evenly across an
unknown number of opportunities that will occur during the year).

This raises an interesting point: I am not looking to simply maximize the ROI
over an arbitrary time horizon. Rather, I am trying to maximize my earnings,
which depend on my ability to reinvest my earnings from individual stocks, which
means I want to maximize my ROI but to minimize my hold time, all depending upon
how many buying opportunities present themselves.

## Hold Time

Minimizing the hold time while maximizing the ROI (maximizing $ROI / t_{hold}$)
is tempting, but misleading: the result is that you won't have enough
opportunities to grow your investment, since you end up selling at 10% growth as
soon as you can. It turns out, this is a good strategy, if you have the
opportunities for it.

## Reinvesting Earnings

Reinvesting earnings requires a short hold time (compared to your ultimate time
horizon).

What I have found is that maximizing the ROI while minimizing the hold time
leads me to high-frequency trading (HFT), which presupposes an infinite supply
of trading opportunities. When that supply is limited (e.g., due to trading
fees, commission, etc.), then we end up raising our hold times. I do not yet
have a formula for representing this trade-off.

I've found that with a 20% drop, the defaults of $m = -0.02$ and $b = 5.2$ are
suitable for getting reasonable returns.

--- When Do We Sell?
    # m = -0.02, b = 5.2
    @assessor.sell_when do |original, today|
      days_held = today.trading_days_from original
      
      sell_point = [@m * days_held + @b, 0].max
    
      today.change_from(original) >= sell_point
    end
---

@s Metrics of Success

The only real metric of succes is how much "money I've made", but even that is
suspect: is that in reference to the liquid cash I have available at any given
moment, or the total amount of my investments? Can I refine my coefficients ($m$
and $b$) based on only 2018-2020, or as far back as I can? Should I be concerned
that 2013 and 2010 had so few buy signals?

The "reinvested profits" figure comes from investing \$15K into the market that
year. When a buy signal comes along, you invest the value in circulation divided
by 30 into the stock (initially \$15K / 30 = \$500).  When a sell signal comes
along, you sell. You then take the profits and put them back into circulation
(e.g., if you made \$600 profit by selling a stock, your circulation is now
\$15.6K, which means you would now be investing \$520 per stock). The "cash"
figure is the amount of cash you have leftover after all of the buy signals and
all of their sell signals; if a sell signal for a given stock never occurs, then
that investment is still in circulation, but you don't have access to it, which
is reflected in your "cash" value.

Here is the explicit breakdown of the buy and sell signals of 2015, with the
requisite drop being 20% instead (note that some sell signals will occur beyond 2015):

<span onclick="togglediv('togglable')">
  <a>
    Breakdown
    <span id="togglable_plus">[+]</span>
  </a>
</span>
<div id="togglable" style="display: none;">
<pre>
loaded 40 transactions
stats: {:m=>-0.02, :b=>5.2}
	med. hold:   225 days
	med. ROI:    0.8086680761099364
	avg. ROI:    2.165151496553147
	ROI / hold:  0.009622895540236208
buying KBH for 0.5
	cash: 14.5
	circulation: 15.0
buying NETI for 0.5
	cash: 14.0
	circulation: 15.0
buying FRO for 0.5
	cash: 13.5
	circulation: 15.0
buying AMPY for 0.5
	cash: 13.0
	circulation: 15.0
buying AMPY for 0.5
	cash: 12.5
	circulation: 15.0
buying AMPY for 0.5
	cash: 12.0
	circulation: 15.0
buying MTL for 0.5
	cash: 11.5
	circulation: 15.0
buying AMPY for 0.5
	cash: 11.0
	circulation: 15.0
buying MTL for 0.5
	cash: 10.5
	circulation: 15.0
buying BBD for 0.5
	cash: 10.0
	circulation: 15.0
buying EGY for 0.5
	cash: 9.5
	circulation: 15.0
buying TWTR for 0.5
	cash: 9.0
	circulation: 15.0
buying NETI for 0.5
	cash: 8.5
	circulation: 15.0
buying BTU for 0.5
	cash: 8.0
	circulation: 15.0
buying MBI for 0.5
	cash: 7.5
	circulation: 15.0
buying FBP for 0.5
	cash: 7.0
	circulation: 15.0
buying AMPY for 0.5
	cash: 6.5
	circulation: 15.0
buying BTU for 0.5
	cash: 6.0
	circulation: 15.0
buying AMPY for 0.5
	cash: 5.5
	circulation: 15.0
buying AMPY for 0.5
	cash: 5.0
	circulation: 15.0
buying AMPY for 0.5
	cash: 4.5
	circulation: 15.0
buying CRK for 0.5
	cash: 4.0
	circulation: 15.0
selling AMPY at 337.647% (\$0.5 => \$2.188)
	cash: 6.188
	circulation: 16.688
selling AMPY at 588.889% (\$0.5 => \$3.444)
	cash: 9.633
	circulation: 19.633
selling AMPY at 490.476% (\$0.5 => \$2.952)
	cash: 12.585
	circulation: 22.085
selling AMPY at 365.0% (\$0.5 => \$2.325)
	cash: 14.91
	circulation: 23.91
selling AMPY at 348.193% (\$0.5 => \$2.241)
	cash: 17.151
	circulation: 25.651
buying RYAM for 0.8550341515454909
	cash: 16.296
	circulation: 25.651
selling AMPY at 280.909% (\$0.5 => \$1.905)
	cash: 18.201
	circulation: 27.056
selling AMPY at 510.843% (\$0.5 => \$3.054)
	cash: 21.255
	circulation: 29.61
buying BTU for 0.9869928956126688
	cash: 20.268
	circulation: 29.61
buying HMY for 0.9869928956126688
	cash: 19.281
	circulation: 29.61
buying HMY for 0.9869928956126688
	cash: 18.294
	circulation: 29.61
buying SID for 0.9869928956126688
	cash: 17.307
	circulation: 29.61
buying HUN for 0.9869928956126688
	cash: 16.32
	circulation: 29.61
buying HUN for 0.9869928956126688
	cash: 15.333
	circulation: 29.61
buying CNX for 0.9869928956126688
	cash: 14.346
	circulation: 29.61
buying IO for 0.9869928956126688
	cash: 13.359
	circulation: 29.61
buying FTK for 0.9869928956126688
	cash: 12.372
	circulation: 29.61
buying FTK for 0.9869928956126688
	cash: 11.385
	circulation: 29.61
buying VIPS for 0.9869928956126688
	cash: 10.398
	circulation: 29.61
buying NETI for 0.9869928956126688
	cash: 9.411
	circulation: 29.61
buying NETI for 0.9869928956126688
	cash: 8.424
	circulation: 29.61
buying CNX for 0.9869928956126688
	cash: 7.437
	circulation: 29.61
buying CLF for 0.9869928956126688
	cash: 6.45
	circulation: 29.61
buying TK for 0.9869928956126688
	cash: 5.463
	circulation: 29.61
buying TK for 0.9869928956126688
	cash: 4.476
	circulation: 29.61
selling NETI at 538.065% (\$0.5 => \$3.19)
	cash: 7.666
	circulation: 32.3
selling NETI at 1023.864% (\$0.987 => \$11.092)
	cash: 18.759
	circulation: 42.406
selling NETI at 643.609% (\$0.5 => \$3.718)
	cash: 22.477
	circulation: 45.624
selling NETI at 1028.867% (\$0.987 => \$11.142)
	cash: 33.619
	circulation: 55.778
selling HMY at 334.971% (\$0.987 => \$4.293)
	cash: 37.912
	circulation: 59.085
selling HMY at 326.285% (\$0.987 => \$4.207)
	cash: 42.119
	circulation: 62.305
selling KBH at 1.105% (\$0.5 => \$0.506)
	cash: 42.625
	circulation: 62.311
selling SID at 291.579% (\$0.987 => \$3.865)
	cash: 46.489
	circulation: 65.188
selling BBD at 0.899% (\$0.5 => \$0.504)
	cash: 46.994
	circulation: 65.193
selling RYAM at 103.846% (\$0.855 => \$1.743)
	cash: 48.737
	circulation: 66.081
selling CLF at 254.375% (\$0.987 => \$3.498)
	cash: 52.235
	circulation: 68.591
selling MBI at 8.254% (\$0.5 => \$0.541)
	cash: 52.776
	circulation: 68.633
selling CNX at 158.451% (\$0.987 => \$2.551)
	cash: 55.327
	circulation: 70.197
selling CNX at 201.415% (\$0.987 => \$2.975)
	cash: 58.302
	circulation: 72.185
selling HUN at 80.867% (\$0.987 => \$1.785)
	cash: 60.087
	circulation: 72.983
selling CRK at 28.801% (\$0.5 => \$0.644)
	cash: 60.731
	circulation: 73.127
selling HUN at 70.16% (\$0.987 => \$1.679)
	cash: 62.41
	circulation: 73.819
selling FBP at 1.633% (\$0.5 => \$0.508)
	cash: 62.918
	circulation: 73.827
selling MTL at 5.642% (\$0.5 => \$0.528)
	cash: 63.447
	circulation: 73.856
selling MTL at 6.634% (\$0.5 => \$0.533)
	cash: 63.98
	circulation: 73.889
selling FTK at 74.076% (\$0.987 => \$1.718)
	cash: 65.698
	circulation: 74.62
selling FTK at 72.313% (\$0.987 => \$1.701)
	cash: 67.399
	circulation: 75.334
selling AMPY at 432.941% (\$0.5 => \$2.665)
	cash: 70.063
	circulation: 77.498
selling IO at 22.119% (\$0.987 => \$1.205)
	cash: 71.269
	circulation: 77.717
selling TK at 8.466% (\$0.987 => \$1.071)
	cash: 72.339
	circulation: 77.8
selling TK at 0.0% (\$0.987 => \$0.987)
	cash: 73.326
	circulation: 77.8
selling VIPS at 0.073% (\$0.987 => \$0.988)
	cash: 74.314
	circulation: 77.801
selling BTU at 0.963% (\$0.5 => \$0.505)
	cash: 74.819
	circulation: 77.806
selling BTU at 12.168% (\$0.987 => \$1.107)
	cash: 75.926
	circulation: 77.926
selling BTU at 0.662% (\$0.5 => \$0.503)
	cash: 76.429
	circulation: 77.929
selling TWTR at 1.324% (\$0.5 => \$0.507)
	cash: 76.936
	circulation: 77.936
selling EGY at 1.224% (\$0.5 => \$0.506)
	cash: 77.442
	circulation: 77.942
selling FRO at 2.999% (\$0.5 => \$0.515)
	cash: 77.957
	circulation: 77.957
	skips:       0

	profits:     \$15.0 -> \$77.95687276829435
	circulation: \$77.95687276829433
</pre>
</div>

<br/>

Below, we have rough summaries for the performance of various sell lines (as
termed by their $m$ and $b$ components) after a 20% drop and a rank of the top
61:

--- Metrics for 2018-2020
"In the cumulative timespan of 2018-2020"

[drop = 20%, m = -0.02, b = 5.2] => ROI: 1.4985018195914688,
                                    Profits: 130.09068571040072,
                                    Hold: 211 days

Yearly Breakdown

| Timeframe |    m  |  b  | Buys | Median Hold | Skips |  Mean ROI  | Reinvested Profits|
|-----------|-------|-----|------|-------------|-------|------------|-------------------|
|   2018    | -0.02 | 5.2 |   31 |        320  |   1   | 1.985966993|  46.2824884012912 |
|   2019    | -0.02 | 5.2 |   53 |        247  |  22   | 0.794949965|  30.4867642574489 |
|   2020    | -0.02 | 5.2 |  348 |        197  | 293   | 1.562228336|  45.1841573684472 |
---

And if we change the initial price drop from 20% to 30%:

--- Metrics for 2018-2020 :=
[drop = 30%, m = -0.02, b = 5.2] => ROI: 1.7578832597251424,
                                    Profits: 28.76512973580418,
                                    Hold: 211 days

Yearly Breakdown
| Timeframe |    m  |  b  | Buys | Median Hold | Skips |       Mean ROI     | Reinvested Profits|
|-----------|-------|-----|------|-------------|-------|--------------------|-------------------|
|    2018   | -0.02 | 5.2 |   8  |   (unsold)  |   0   | -0.091729607538731 | 14.63308156984507 |
|    2019   | -0.02 | 5.2 |  19  |      246    |   0   | 0.8834767826743782 | 23.39302943540659 |
|    2020   | -0.02 | 5.2 | 108  |      197    |  59   | 2.0487223893739896 | 66.04386747735361 |
---

@s The Simulator

While the assessor provides the framework for routinely and cleanly assessing
the data, the contents of that framework, the actual algorithm, are contained in
the simulator.

--- simulator.rb
class Simulator
  attr_accessor :results
  attr_accessor :assessor
  attr_accessor :stocks
  attr_accessor :after
  attr_accessor :before
  attr_accessor :m
  attr_accessor :b

  def initialize(stocks:  nil,
                 drop:   -0.2,
                 rank:    60,
                 m:      -0.02,
                 b:       5.2,
                 after:   nil,
                 before:  nil)
    @stocks = stocks
    @after  = after
    @before = before
    @m      = m
    @b      = b

    @assessor = Assessor.new

    @{When Do We Buy?}
    
    @{When Do We Sell?}
  end

  def run
    @assessor.assess_buys @stocks, :after  => @after,
                                   :before => @before
    assess_sells
  end

  def assess_sells
    @results = @assessor.assess_sells
  end
end

---

@s The Assessor



--- assessor.rb
class Assessor
  attr_accessor :buying_plan
  attr_accessor :selling_plan
  attr_accessor :history_requirement

  attr_accessor :holding

  def buy_when(history: 2, &b)
    @buying_plan = b
    @history_requirement = history
  end

  def sell_when(&b)
    @selling_plan = b
  end

  def buy?(ticker)
    buying_plan[ticker]
  end

  def sell?(ticker, original)
    selling_plan[ticker, original]
  end

  def assess_buys(tickers, opts={})
    tids = tickers.map {|t| t.id }

    debut  = opts[:after] || Time.parse('1 march 1900')
    debut  = debut.is_a?(Time) ? debut : Time.parse(debut.to_s)
    fin    = opts[:before] || Time.parse(Date.today.to_s)
    fin    = fin.is_a?(Time) ? fin : Time.parse(fin.to_s)

    bars   = Bar.where(:date => debut..fin, :ticker_id => tids)
                .order(:ticker_id, Sequel.asc(:date))
                .all
    groups = bars.group_by {|b| b.ticker_id }

    @holding = []

    # create groups of size `@history_requirement`, and then
    # pass that history to the checker
    # most recent bar is at -1, oldest bar is at 0
    groups.map do |ticker_id, bars|
      # assume the history is 
      histories = bars.each_cons history_requirement

      @holding += histories.filter do |history|

        # verify that the history is consecutive
        day_deltas = history.each_cons(2).map {|a, b| b.date - a.date }

        if day_deltas.any? {|v| v > 4.days }
          false
        else
          buy? history
        end
      end.map {|history| history.last }
    end

    # `@holding` currently references the days that a decision to buy is made
    # (using the day's closing price), but we don't *actually* buy until the
    # next morning. So we need to replace these stocks with the next day's
    # stock.
    # 
    # This is key because the `Bar#change_from` method operates on the opening
    # price of the earlier day.
    #
    # If it's `nil` because we're dealing with some HOT OF THE PRESS stock
    # recommendations, then... I don't really have a plan for that yet.
    # Then the stock doesn't exist. Send a text, whatever. I need to include
    # some notification system here.
    #
    # TODO include the notification system at this point.
    #
    # From here on out, we're dealing with *simulation*.
    @holding = @holding.map do |stock|
      bars  = Bar.where(:ticker => stock.ticker,
                        :date => stock.date..(stock.date + 7.days))
                 .order(Sequel.asc(:date))
                 .all
      index = bars.index stock
      bars[index + 1] || stock
    end
  end

  def assess_sells
    sales = @holding.map do |stock|
      bars     = Bar.where(:ticker => stock.ticker) { date >= stock.date }
                    .order(Sequel.asc(:date))
                    .all
      sell_bar = bars.find {|day| sell? stock, day }

      {:buy  => stock,
       :sell => sell_bar,
       :hold => sell_bar ? sell_bar.trading_days_from(stock)  : nil,
       :ROI  => sell_bar ? sell_bar.change_from(stock) : -1 }
    end
  end

  def assess(tickers, opts={})
    assess_buys tickers, opts
    assess_sells
  end
end
---

@s Accessing Market Data

I use Alpaca.Markets to access market data. At the moment, I only use daily
data. Alpaca's data is unadjusted for splits, and I have found at least one
unresolved issue with their data (January 2018 data for AFL).

--- market.rb
require 'yaml'
CONFIG = YAML.load File.read("config.yml")

require 'open-uri'
require 'alpaca/trade/api'
require 'alphavantagerb'
require './db.rb'
require './assessor.rb'
require './simulator.rb'
require 'statistics'
require 'histogram/array'

@{Configure the Market APIs}
---

@s Configure the Market APIs

As a matter of boilerplate, I need to link up to the Alpaca API in order to
trade.

--- Configure the Market APIs
Alpaca::Trade::Api.configure do |config|
  config.endpoint   = "https://api.alpaca.markets"
  config.key_id     = CONFIG[:Alpaca][:ID]
  config.key_secret = CONFIG[:Alpaca][:secret]
end

ALP_CLIENT = Alpaca::Trade::Api::Client.new
AV_CLIENT  = Alphavantage::Client.new :key => CONFIG[:AV][:key]

@{Enhance the Alpaca Ruby API}
--- 

@s Enhance the Alpaca Ruby API

Minor issue with the Ruby API: it only allows you to specify the symbols and
limit the number of results returned. The below change allows you to supply
arbitrary options so that the usage of the `CLIENT.bars` can match the web API.

--- Enhance the Alpaca Ruby API
class Alpaca::Trade::Api::Client
  # This takes care of the issue where I was not able to provide other options
  # to the GET request. Now, I can specify "before" and "after" IAW the API.
  def bars(timeframe, symbols, opts={})
    opts[:limit] ||= 100
    opts[:symbols] = symbols.join(',')

    validate_timeframe(timeframe)
    response = get_request(data_endpoint, "v1/bars/#{timeframe}", opts)
    json = JSON.parse(response.body)
    json.keys.each_with_object({}) do |symbol, hash|
      hash[symbol] = json[symbol].map { |bar| Alpaca::Trade::Api::Bar.new(bar) }
    end
  end 
end
---

