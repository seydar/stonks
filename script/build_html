#!/usr/bin/env ruby
require './market.rb'
require './script/helpers.rb'
require 'erb'

require "/home/ari/servers/auberge.rb" if File.exist? "/home/ari/servers/auberge.rb"

START = "1 jan #{ARGV[0] || 2021}"
FIN   = ARGV[0] ? "31 dec #{ARGV[0]}" : Date.today.strftime("%d %b %Y")
KIND  = ARGV[0] || "2021"

spy = proc do |debut, fin|
  buy  = SPY.bars.sort_by {|b| (debut - b.date).abs }.first
  sell = SPY.bars.sort_by {|b| (fin - b.date).abs }.first

  sell.change_from buy
end

def text_ari(buy: [], sell: [])
  return unless defined? Auberge

  unless buy.empty?
    str = buy.map {|b| b[:buy].ticker.symbol }.join ", "
    CONFIG[:phones].each do |phone|
      Auberge::Phone.sms :to => phone,
                         :body => "buy #{str}"
    end

    # do the automatic buy
    ari = Account.first
    buy.each {|b| ari.buy b[:buy] }
  end

  unless sell.empty?
    str = sell.map do |b|
      "#{b[:sell].ticker.symbol} (#{h[:buy].date.strftime "%Y-%m-%d" })\n"
    end.join ", "
    CONFIG[:phones].each do |phone|
      Auberge::Phone.sms :to => phone,
                         :body => "sell #{str}"
    end

    # do the automatic sell
    ari = Account.first
    sell.each {|h| ari.sell h }
  end
end

def uusi(txt); "<span id='future'>#{txt}</span>"; end
def money(num); "$%0.3f" % num; end
def perc(num); "%0.3f%%" % (num * 100); end

sim = simulate :year => KIND.to_i, :drop => -0.2, :force => false

# how well would we have done if we had just invested in SPY?
sim.results.each do |h|
  sell_date = h[:sell] ? h[:sell].date : h[:buy].ticker.latest_bar.date
  h[:spy] = spy[h[:buy].date, sell_date]
end

# could be the day after the deciding day, or it could be the deciding day (if
# there's no new bar after it, aka it's bleeding edge)
latest_date = NYSE[5].latest_bar.date
new_buys  = sim.results.filter {|h| h[:buy].date >= latest_date }
new_sells = sim.results.filter {|h| h[:sell] && h[:sell].date >= latest_date }
print "\tbuy: "
puts "\t[#{new_buys.map {|t| t[:buy].ticker.symbol }.join ", "}]"
print "\tsell: "
puts "\t[#{new_sells.map {|t| t[:buy].ticker.symbol }.join ", "}]"

text_ari :buy => new_buys, :sell => new_sells

# <th><b>Symbol</b></th>
# <th><b>5-Day Trade Volume</b></th>
# <th><b>Buy Date</b></th>
# <th><b>Buy Price</b></th>
# <th><b>Days Held</b></th>
# <th><b>ROI Threshold</b></th>
# <th><b>Sell Date</b></th>
# <th><b>Sell Price</b></th>
# <th><b>Sell ROI</b></th>
# <th><b>SPY ROI</b></th>

rows = sim.results.sort_by {|r| r[:buy].date }.reverse.map do |rec|
  buy = rec[:buy]
  latest = buy.ticker.latest_bar
  latest_roi = (latest.close / buy.open) - 1

  symbol     = "<a href='https://finance.yahoo.com/quote/" +
                 "#{buy.ticker.symbol}'>#{buy.ticker.symbol}</a>"
  vol_avg    = buy.volumes(:prior => 5).mean.round(0)
  buy_date   = buy.date == Date.today ? uusi(buy.date.strftime("%Y-%m-%d")) : buy.date.strftime("%Y-%m-%d")
  buy_price  = buy.date == Date.today ? uusi(money(buy.close)) : money(buy.open)
  days_held  = rec[:hold] ? rec[:hold] : buy.trading_days_from(latest)
  roi_thresh = perc([sim.m * days_held + sim.b, 0].max)
  days_held  = rec[:hold] ? days_held.to_i : uusi(days_held.to_i)
  roi_thresh = rec[:hold] ? roi_thresh : uusi(roi_thresh)
  sell_date  = rec[:sell] ? rec[:sell].date.strftime("%Y-%m-%d") : uusi("-")
  sell_price = rec[:sell] ? money(rec[:sell].close) : uusi(money(latest.close))
  sell_roi   = rec[:sell] ? perc(rec[:ROI]) : uusi(perc(latest_roi))
  spy_roi    = perc(rec[:spy])


  [symbol,
   vol_avg,
   buy_date,
   buy_price,
   days_held,
   roi_thresh,
   sell_date,
   sell_price,
   sell_roi,
   spy_roi]
end

mean_ROI       = perc(sim.results.map {|r| r[:ROI] }.mean)
liquidated_ROI = sim.results.map do |r|
  if r[:sell]
    r[:ROI]
  else
    (r[:buy].ticker.latest_bar.close / r[:buy].open) - 1
  end
end.mean
liquidated_ROI = perc(liquidated_ROI)

out = ERB.new(File.read("views/table.erb")).result

fname = "views/stock_recs.#{KIND}.html"
open(fname, "w") {|f| f.write out }
puts "file made @ #{fname}"

